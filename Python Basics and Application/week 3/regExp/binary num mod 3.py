"""
Примечание:
Эта задача является дополнительной, то есть ее решение не принесет вам баллы.
Задача сложнее остальных задач из этого раздела, и идея ее решения выходит за рамки простого понимания
регулярных выражений как средства задания шаблона строки.
Мы решили включить данную задачу в урок, чтобы показать, что регулярным выражением можно проверить
не только "внешний вид" строки, но и заложенный в ней смысл.


Вам дана последовательность строк.
Выведите строки, содержащие двоичную запись числа, кратного 3.

Двоичной записью числа называется его запись в двоичной системе счисления.

Примечание 2:
Данная задача очень просто может быть решена приведением строки к целому числу и проверке остатка от деления на три,
но мы все же предлагаем вам решить ее, не используя приведение к числу.
Sample Input:

0
10010
00101
01001
Not a number
1 1
0 0
Sample Output:

0
10010
01001
"""
# Это библиотека преобразования FSM/regex для python (Finale State Machine - конечные автоматы)
# из комментария отсюда
# https://fooobar.com/questions/1247901/convert-finite-state-machine-to-regular-expression
# from greenery import fsm, lego
import re
import sys
#
# # Конечный автомат делимости на 3 двоичного числа:
# # https://fooobar.com/questions/1148710/regular-expression-for-binary-numbers-divisible-by-3
#
# # Задаем узлы конечного автомата
# A, B, C = range(3)
# # Возможные сигналы
# a, b = '0', '1'
#
# # Задаем конечный автомат:
# three_mod_fsm = fsm.fsm(
#     alphabet={a, b},
#     states={A, B, C},
#     initial=A,
#     finals={A},
#     map={
#         B: {a: C, b: A},
#         C: {a: B, b: C},
#         A: {a: A, b: B}
#     }
# )
#
# # Конвертируем конечный автомат в регулярное выражение
# three_mod_regex = lego.from_fsm(three_mod_fsm)
#
# # закомментим всё, потому что на степике не установлен модуль greenery
three_mod_regex = '(0|1(01*0)*1)*'

# Выводим в консоль наш КА
# print(three_mod_fsm)
# Выводим в консоль регулярку ему соответствующую
print(three_mod_regex)

for line in sys.stdin:
    line = line.rstrip()
    pattern = re.compile(str(three_mod_regex))
    if re.fullmatch(pattern, line):
        print(line)
